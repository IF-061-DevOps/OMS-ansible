
---

- name: Install MySQL Community repository
  yum: name=http://repo.mysql.com/mysql-community-release-el7-5.noarch.rpm state=present

- name: Install MySQL
  yum: name=mysql state=present

- name: Start MySQL Server 
  service: name=mysql state=started enabled=yes

- name: update mysql root password for all root accounts
  mysql_user: name=root host=localhost password={{ root_db_password }}



# Створення Б/Д OMS та користувачів
- mysql_user: name=root host=localhost password={{ root_db_password }}

- name: Create the database's
  mysql_db:
    name: "{{ database_oms }} "
    collation: "default('utf8_general_ci')"
    encoding: "default('utf8')"
    state: present

- name: Create MySQL user for user
  mysql_user: name={{ user_db_oms }} priv={{ database_oms }}.*:ALL password={{ password_db_oms }} login_user=root 






# Крок 1. Настройка Мастера   На сервері, який буде виступати майстром, необхідно внести правки в my.cnf:
# ID сервера  Master - 1, Slave -2 і т.д.
# шлях до бінарному логу
# назва БД, яка реплікується
- name: CreateMasterDB
  lineinfile: 
    dest=/etc/my.cnf 
    insertafter="[mysqld]"  
    regexp="server-id"
    line="server-id = 1"
# regexp  (added in 1.7)
  lineinfile: 
    dest=/etc/my.cnf 
    insertafter="[mysqld]"  
    regexp="log_bin"
    line="log_bin = /var/log/mysql/mysql-bin.log"
  lineinfile: 
    dest=/etc/my.cnf 
    insertafter="[mysqld]"  
    regexp="binlog_do_db"
    line="binlog_do_db = {{ name_db_replication }}"

# також: можливе виконання наступних команд для створення реплікації
# - name: generate server-id
#   shell: hostname -I | sed -e 's/ \+\([a-z0-9]\+\:\)\+[a-z0-9]\+//' | sed -e 's/ /\n/' | grep -v '^$' | tail -1 | awk -F. '{print $3 * 256 + $4}'
#   register: mysql_server_id
# 
# - name: check replication slave status
#   mysql_replication: mode=getslave
#   ignore_errors: true
#   register: slave
# 
# - name: get master replication status
#   mysql_replication: mode=getmaster login_user={{ mysql_users.phoenixcorp.user }} login_password={{ mysql_users.phoenixcorp.password }}
#   delegate_to: "{{ groups['mysql-master'][0] }}"
#   register: replication
#   when: slave|failed
# 
# - name: define master in slave
#   mysql_replication: mode=changemaster master_host={{ groups['mysql-master'][0] }} master_log_file={{ replication.File }} master_log_pos={{ replication.Position }} master_user={{ mysql_users.slave.user }} master_password={{ mysql_users.slave.password }}
#   when: slave|failed
# 
# - name: start slave
#   mysql_replication: mode=startslave
# 
# - name: mysql backup script symlink
#   cron: name="database backup" hour={{ item.0 }} minute={{ item.0 }} user="root" job="/home/live/scripts/cron/backup_db.sh >> /var/log/backup.log" cron_file=backup_database
#   when: "'{{ item.1 }}' == '{{ inventory_hostname }}'"
#   with_indexed_items: groups['mysql-slave']
# 
#  або
#   # If the database is replicated the users
#   # to be used for replication:
#   mysql_repl_user:                          
#     - name: 056db
#       pass: 056db
# 
#   # The role of this server in replication:
#   mysql_repl_role: master
# 
#   # A unique id for the mysql server (used in replication):
#   mysql_db_id: 7
# 













#Перезапускаем Mysql:

- name: restart mysql.
  command: systemctl start mysqld
  sudo: yes




# Крок 2. Права на реплікацию  
# Створимо профіль користувача, з під якого буде проходити реплікация# 

- mysql_user: name={{ name_user_replic }} password={{ password_user_replic }} priv=*.*:ALL state=present

# або 
# GRANT REPLICATION SLAVE ON *.* TO 'slave_user'@'%' IDENTIFIED BY 'password' FLUSH PRIVILEGES;
# # даєм права користувачу slave_user с паролем password
# 
# Далі, блокируем всі таблиці в нашій базі даних:
# 
# USE newdatabase;
# FLUSH TABLES WITH READ LOCK;
# Преревірка статус Мастер-сервера:
  
  
# Крок 3. наступне - дамп бази даних:
# 
# mysqldump -u root -p newdatabase > newdatabase.sql
- mysql_db: state=dump name={{ name_db_replic }} target=/tmp/{{ name_dumpfile }}

# Copy database dump file to remote host and restore it to database ???
- copy: src=/tmp/{{ name_dumpfile }} dest=/tmp
- mysql_db: name={{ name_db_replic }} state=import target=/tmp/{{ name_dumpfile }}


# Разблоковуємо таблиці:
# 
# UNLOCK TABLES;
# 
# 
# Крок 4. Створення бази на слейві 
# 
# В консолі mysql на Слейві створюємо базу с таким же ім"ям:
# 
# CREATE DATABASE newdatabase;
#   Після цього загружаем дамп (із bash):
# 
# mysql -u root -p newdatabase < newdatabase.sql
# 
# Крок 5. Настройка Слейва
# 
# В настройках my.cnf на Слейві необхідно вказати такі параметри:
# 
# server-id = 2
# 
# # Шлях до relay логу
# relay-log = /var/log/mysql/mysql-relay-bin.log
# 
#   # Шлях до bin логу на Мастері
# log_bin = /var/log/mysql/mysql-bin.log
# 
# # База даних для репликації
# binlog_do_db = newdatabase
# 
# Крок 6. Запуск Слейва, для цього необхідно вказати параметри підключення до мастеру. 
# 
# В консолі mysql на Слейві необхідно виконати запит:
# 
# CHANGE MASTER TO MASTER_HOST='10.10.0.1', MASTER_USER='slave_user', MASTER_PASSWORD='password',
# MASTER_LOG_FILE = 'mysql-bin.000001', MASTER_LOG_POS = 107;
# # Всі вказані значення ми беремо з настройок Мастера
#   
# После цього запускаемо репликацію на Слейве:
# 
# START SLAVE;
# Статус репликации
# 
# Перевіряємо роботу реплікації на Слейві запитом:
#   
# 
# 
# 
# 
# 
  







--- 
  - name: Create slave 
    include_vars: main.yml

  - name: Ensure Service is Started and Enabled  
    service: name=mysql state=started enabled=yes
    sudo: yes                                    

# necessery steps
# server-id = 2
# Путь к relay логу            relay-log = /var/log/mysql/mysql-relay-bin.log
# Путь к bin логу на Мастере   log_bin = /var/log/mysql/mysql-bin.log
# База данных для репликации   binlog_do_db = omsdb

  - name: Modify configuration file to listen on all interfaces
    ini_file: dest=/etc/my.cnf.d/server.cnf
              section=mysqld
              option=bind-address
              value=0.0.0.0
              backup=yes
      
  - name: Modify configuration file to setup server ID
    ini_file: dest=/etc/my.cnf.d/server.cnf
              section=mysqld
              option=server-id
              value=2

  - name: Modify configuration file to setup bin.log
    ini_file: dest=/etc/my.cnf.d/server.cnf
              section=mysqld
              option=log_bin
              value=/tmp/mysql-bin.log
                                        
  - name: Modify configuration file to setup relay-log
    ini_file: dest=/etc/my.cnf.d/server.cnf
              section=mysqld
              option=relay-log
              value=/tmp/mysql-relay.log

                        
  - name: Modify configuration file to setup binlog_do_db
    ini_file: dest=/etc/my.cnf.d/server.cnf
              section=mysqld
              option=binlog_do_db
              value={{name_db_oms}}


  - name: Create replication account
    mysql_user: name={{ user_db_replic }}
                host=%
                password={{ pass_db_replic }}
                priv="*.*:REPLICATION SLAVE"
                state=present

  - name: Restart mysql service
    service: name=mysql state=restarted

  - name: Setup replication
    command: mysql -uroot -e "CHANGE MASTER TO master_host='db1', master_user='{{ user_db_replic }}', master_password='{{ pass_db_replic }}', master_use_gtid=current_pos"
    
    
# Change master to master server 192.168.1.1 and use binary log 'mysql-bin.XXXX' with position XXXX
#  - mysql_replication: mode=changemaster master_host=db1 master_log_file=mysql-bin.000001 master_log_pos=312

# Check slave status using port 3308
#  - mysql_replication: mode=getslave login_host=ansible.example.com login_port=3308    


  - name: Restart mysql service 2
    service: name=mysql state=restarted
                                                                            
# Stop mysql slave thread
#- mysql_replication: mode=stopslave
# Get master binlog file name and binlog position
#- mysql_replication: mode=getmaster
# Change master to master server 192.168.1.1 and use binary log 'mysql-bin.000009' with position 4578
#- mysql_replication: mode=changemaster master_host=192.168.1.1 master_log_file=mysql-bin.000009 master_log_pos=4578